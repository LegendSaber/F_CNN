import pandas as pd
from torch.utils.data import Dataset
import glob
import os
import cv2
import torch
from torchvision import transforms


class MalwareDataset(Dataset):
    def __init__(self, file_path, y_data):
        self.file_path = file_path
        self.y_data = y_data
        self.len = len(self.file_path)
        self.transforms_data = transforms.Compose(
            [transforms.ToTensor()]
        )

    def __getitem__(self, index):
        image = cv2.imread(self.file_path[index])
        image = cv2.resize(image, (256, 256))
        image = self.transforms_data(image)

        return image, self.y_data[index]

    def __len__(self):
        return self.len


def get_data(root_path):
    image_file_name = glob.glob(os.path.join(root_path, "*.png"))
    train_label_path = os.path.join(root_path, "..", "train_label.csv")
    df = pd.read_csv(train_label_path)
    y_data = get_train_label(image_file_name, df)

    return image_file_name, y_data


# 从trainLabels.csv中获得文件名对应的类别
def get_train_label(file_path, df):
    train_label = []
    for fp in file_path:
        file_name = get_file_name(fp)
        train_label.append(df[df["filename"] == file_name]["family"].astype(int).values[0])
    return torch.Tensor(train_label)


# 根据文件路径得出不带后缀的文件名
def get_file_name(file_path):
    file_name_begin = file_path.rfind("/") + 1
    file_name_end = file_path.rfind(".")
    return file_path[file_name_begin: file_name_end]