import pandas as pd
from torch.utils.data import Dataset
import glob
import os
import cv2
import torch
from torchvision import transforms


class MalwareDataset(Dataset):
    def __init__(self, gray_path, markov_path, y_data):
        self.gray_path = gray_path
        self.markov_path = markov_path
        self.y_data = y_data
        self.len = len(self.gray_path)
        self.transforms_data = transforms.Compose(
            [transforms.ToTensor()]
        )

    def __getitem__(self, index):
        gray_image_path = self.gray_path[index]
        gray_image = cv2.imread(gray_image_path)
        gray_image = cv2.resize(gray_image, (224, 224))
        gray_image = self.transforms_data(gray_image)

        markov_image_path = self.markov_path[index]
        markov_image = cv2.imread(markov_image_path)
        markov_image = cv2.resize(markov_image, (256, 256))
        markov_image = self.transforms_data(markov_image)

        return gray_image, markov_image, self.y_data[index]

    def __len__(self):
        return self.len


def get_data(gray_path, markov_path):
    gray_file_name = glob.glob(os.path.join(gray_path, "*.png"))
    markov_file_name = []
    for file_name in gray_file_name:
        markov_file_name.append(os.path.join(markov_path, file_name[file_name.rfind("/") + 1:]))

    train_label_path = os.path.join(gray_path, "..", "train_label.csv")
    df = pd.read_csv(train_label_path)
    y_data = get_train_label(gray_file_name, df)

    return gray_file_name, markov_file_name, y_data


# 从trainLabels.csv中获得文件名对应的类别
def get_train_label(file_path, df):
    train_label = []
    for fp in file_path:
        file_name = get_file_name(fp)
        train_label.append(df[df["filename"] == file_name]["family"].astype(int).values[0])
    return torch.Tensor(train_label)


# 根据文件路径得出不带后缀的文件名
def get_file_name(file_path):
    file_name_begin = file_path.rfind("/") + 1
    file_name_end = file_path.rfind(".")
    return file_path[file_name_begin: file_name_end]