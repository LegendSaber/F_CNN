import os.path
from torch.utils.data import Dataset
import glob
import pandas as pd
import torch
from torchvision import transforms
import cv2


class MalwareDataset(Dataset):
    def __init__(self, gray_path, markov_path, is_train):
        self.is_train = is_train
        self.transforms_data = transforms.Compose([transforms.ToTensor()])

        self.gray_image_path = glob.glob(os.path.join(gray_path, "*.png"))
        self.markov_path = markov_path
        self.len = len(self.gray_image_path)

        # 判断是否是要获得训练的数据集
        if is_train:
            train_label_path = os.path.join(gray_path, "..", "trainLabels.csv")
            df = pd.read_csv(train_label_path)
            self.y_data = torch.Tensor(get_train_label(self.gray_image_path, df))

    def __getitem__(self, index):
        gray_image_path = self.gray_image_path[index]
        gray_image = cv2.imread(gray_image_path)
        gray_image = cv2.resize(gray_image, (224, 224))
        gray_image = self.transforms_data(gray_image)

        markov_image_path = os.path.join(self.markov_path, gray_image_path[gray_image_path.rfind("/") + 1:])
        markov_image = cv2.imread(markov_image_path)
        markov_image = cv2.resize(markov_image, (256, 256))
        markov_image = self.transforms_data(markov_image)

        if self.is_train:
            return gray_image, markov_image, self.y_data[index]
        else:
            file_name = get_file_name(gray_image_path)
            return gray_image, markov_image, file_name

    def __len__(self):
        return self.len


# 根据文件路径得出不带后缀的文件名
def get_file_name(file_path):
    file_name_begin = file_path.rfind("/") + 1
    file_name_end = file_path.rfind(".")
    return file_path[file_name_begin:file_name_end]


# 从trainLabels.csv中获得文件名对应的类别
def get_train_label(file_path, df):
    train_label = []
    for fp in file_path:
        file_name = get_file_name(fp)
        train_label.append(df[df["Id"] == file_name]["Class"].astype(int).values[0] - 1)
    return train_label