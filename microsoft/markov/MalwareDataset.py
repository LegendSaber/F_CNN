import torch
from torch.utils.data import Dataset
import glob
import os
import pandas as pd
from torchvision import transforms
import cv2


class MalwareDataset(Dataset):
    def __init__(self, root_path, is_train):
        self.is_train = is_train
        self.file_path = glob.glob(os.path.join(root_path, "*.png"))
        self.len = len(self.file_path)
        self.transforms_data = transforms.Compose([transforms.ToTensor()])
        if is_train:
            train_label_path = os.path.join(root_path, "..", "trainLabels.csv")
            df = pd.read_csv(train_label_path)
            self.y_data = torch.Tensor(get_train_label(self.file_path, df))

    def __getitem__(self, index):
        image = cv2.imread(self.file_path[index])
        image = cv2.resize(image, (256, 256))
        image = self.transforms_data(image)
        if self.is_train:
            return image, self.y_data[index]
        else:
            file_name = get_file_name(self.file_path[index])
            return image, file_name

    def __len__(self):
        return self.len


# 根据文件路径得出不带后缀的文件名
def get_file_name(file_path):
    file_name_begin = file_path.rfind("/") + 1
    file_name_end = file_path.rfind(".")
    return file_path[file_name_begin:file_name_end]


# 从trainLabels.csv中获得文件名对应的类别
def get_train_label(file_path, df):
    train_label = []
    for fp in file_path:
        file_name = get_file_name(fp)
        train_label.append(df[df["Id"] == file_name]["Class"].astype(int).values[0] - 1)
    return train_label